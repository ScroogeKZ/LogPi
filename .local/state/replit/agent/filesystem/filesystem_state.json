{"file_contents":{"app.py":{"content":"import os\nimport logging\n\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\nfrom flask_wtf.csrf import CSRFProtect\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\nlogin_manager = LoginManager()\ncsrf = CSRFProtect()\n\n# Create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-key-change-in-production\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Configure the database\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\", \"sqlite:///xpom_kz.db\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n\n# Initialize extensions\ndb.init_app(app)\nlogin_manager.init_app(app)\ncsrf.init_app(app)\n\n# CSRF exemptions for public forms\ncsrf.exempt('routes.track_result')\n\n# Configure Flask-Login\nlogin_manager.login_view = 'login'\nlogin_manager.login_message = 'Пожалуйста, войдите в систему для доступа к этой странице.'\nlogin_manager.login_message_category = 'info'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    from models import User\n    return User.query.get(int(user_id))\n\nwith app.app_context():\n    # Import models to ensure tables are created\n    import models\n    db.create_all()\n    \n    # Create default admin user if not exists\n    from models import User\n    from werkzeug.security import generate_password_hash\n    \n    admin = User.query.filter_by(email='admin@xpom-kz.com').first()\n    if not admin:\n        admin_user = User(\n            full_name='Администратор',\n            email='admin@xpom-kz.com',\n            phone='+77029970094',\n            role='logist'\n        )\n        admin_user.password_hash = generate_password_hash('admin123')\n        db.session.add(admin_user)\n        db.session.commit()\n        logging.info(\"Default admin user created: admin@xpom-kz.com / admin123\")\n\n# Import routes and register template filters\nimport routes\nfrom utils import register_template_filters\nregister_template_filters(app)\n","size_bytes":2257},"forms.py":{"content":"from flask_wtf import FlaskForm\nfrom wtforms import StringField, TextAreaField, SelectField, FloatField, PasswordField, DateTimeField, HiddenField\nfrom wtforms.validators import DataRequired, Email, Length, Optional, NumberRange\nfrom wtforms.widgets import TextArea\nfrom models import Driver\n\nclass OrderForm(FlaskForm):\n    # Customer information\n    customer_name = StringField('Ф.И.О.', validators=[DataRequired(), Length(min=2, max=100)])\n    customer_phone = StringField('Номер телефона', validators=[DataRequired(), Length(min=10, max=20)])\n    customer_email = StringField('Email', validators=[Optional(), Email()])\n    \n    # Pickup details\n    pickup_address = TextAreaField('Адрес погрузки', validators=[DataRequired()], widget=TextArea())\n    pickup_contact = StringField('Контактное лицо (погрузка)', validators=[Optional(), Length(max=100)])\n    pickup_phone = StringField('Телефон (погрузка)', validators=[Optional(), Length(max=20)])\n    \n    # Delivery details\n    delivery_address = TextAreaField('Адрес выгрузки', validators=[DataRequired()], widget=TextArea())\n    delivery_contact = StringField('Контактное лицо (выгрузка)', validators=[Optional(), Length(max=100)])\n    delivery_phone = StringField('Телефон (выгрузка)', validators=[Optional(), Length(max=20)])\n    \n    # Cargo details\n    cargo_description = TextAreaField('Описание груза', validators=[DataRequired()], widget=TextArea())\n    cargo_weight = FloatField('Вес груза (кг)', validators=[Optional(), NumberRange(min=0)])\n    cargo_volume = FloatField('Объем груза (м³)', validators=[Optional(), NumberRange(min=0)])\n    cargo_dimensions = StringField('Габариты груза', validators=[Optional(), Length(max=100)])\n    \n    # Hidden field for order type\n    order_type = HiddenField()\n\nclass TrackingForm(FlaskForm):\n    tracking_number = StringField('Номер заявки', validators=[DataRequired()], \n                                render_kw={\"placeholder\": \"Введите номер заявки (например: AST-2025-001)\"})\n\nclass RegistrationForm(FlaskForm):\n    full_name = StringField('Полное имя', validators=[DataRequired(), Length(min=2, max=100)])\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    phone = StringField('Номер телефона', validators=[DataRequired(), Length(min=10, max=20)])\n    password = PasswordField('Пароль', validators=[DataRequired(), Length(min=6)])\n    confirm_password = PasswordField('Подтвердите пароль', validators=[DataRequired()])\n\nclass LoginForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Пароль', validators=[DataRequired()])\n\nclass AdminOrderForm(FlaskForm):\n    status = SelectField('Статус заказа', choices=[\n        ('new', 'Новая заявка'),\n        ('confirmed', 'Подтверждена'),\n        ('in_progress', 'В процессе доставки'),\n        ('delivered', 'Доставлена'),\n        ('cancelled', 'Отменена')\n    ])\n    price = FloatField('Стоимость доставки', validators=[Optional(), NumberRange(min=0)])\n    driver_id = SelectField('Водитель', coerce=int, validators=[Optional()])\n    internal_comments = TextAreaField('Внутренние комментарии', validators=[Optional()], widget=TextArea())\n    pickup_date = DateTimeField('Дата забора', validators=[Optional()], format='%Y-%m-%dT%H:%M')\n    delivery_date = DateTimeField('Дата доставки', validators=[Optional()], format='%Y-%m-%dT%H:%M')\n    \n    def __init__(self, *args, **kwargs):\n        super(AdminOrderForm, self).__init__(*args, **kwargs)\n        # Populate driver choices\n        drivers = Driver.query.filter_by(is_active=True).all()\n        self.driver_id.choices = [(0, 'Не назначен')] + [(d.id, f\"{d.full_name} ({d.vehicle_number})\") for d in drivers]\n\nclass DriverForm(FlaskForm):\n    full_name = StringField('Полное имя', validators=[DataRequired(), Length(min=2, max=100)])\n    phone = StringField('Номер телефона', validators=[DataRequired(), Length(min=10, max=20)])\n    vehicle_number = StringField('Номер автомобиля', validators=[Optional(), Length(max=20)])\n","size_bytes":4455},"main.py":{"content":"from app import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":99},"models.py":{"content":"from app import db\nfrom flask_login import UserMixin\nfrom datetime import datetime\nfrom werkzeug.security import generate_password_hash, check_password_hash\nimport string\nimport random\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    full_name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    phone = db.Column(db.String(20), nullable=False)\n    password_hash = db.Column(db.String(256))\n    role = db.Column(db.String(20), default='employee')  # employee, logist\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    is_active = db.Column(db.Boolean, default=True)\n    \n    # Relationship\n    orders = db.relationship('Order', backref='customer', lazy=True)\n    \n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n    \n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n    \n    def is_logist(self):\n        return self.role == 'logist'\n    \n    def __repr__(self):\n        return f'<User {self.email}>'\n\nclass Driver(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    full_name = db.Column(db.String(100), nullable=False)\n    phone = db.Column(db.String(20), nullable=False)\n    vehicle_number = db.Column(db.String(20))\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationship\n    orders = db.relationship('Order', backref='assigned_driver', lazy=True)\n    \n    def __repr__(self):\n        return f'<Driver {self.full_name}>'\n\nclass Order(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    tracking_number = db.Column(db.String(20), unique=True, nullable=False)\n    \n    # Customer information\n    customer_name = db.Column(db.String(100), nullable=False)\n    customer_phone = db.Column(db.String(20), nullable=False)\n    customer_email = db.Column(db.String(120))\n    customer_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)\n    \n    # Order details\n    order_type = db.Column(db.String(20), nullable=False)  # astana, kazakhstan\n    pickup_address = db.Column(db.Text, nullable=False)\n    pickup_contact = db.Column(db.String(100))\n    pickup_phone = db.Column(db.String(20))\n    \n    delivery_address = db.Column(db.Text, nullable=False)\n    delivery_contact = db.Column(db.String(100))\n    delivery_phone = db.Column(db.String(20))\n    \n    cargo_description = db.Column(db.Text, nullable=False)\n    cargo_weight = db.Column(db.Float)\n    cargo_volume = db.Column(db.Float)\n    cargo_dimensions = db.Column(db.String(100))\n    \n    # Order status and management\n    status = db.Column(db.String(20), default='new')  # new, confirmed, in_progress, delivered, cancelled\n    price = db.Column(db.Float)\n    driver_id = db.Column(db.Integer, db.ForeignKey('driver.id'), nullable=True)\n    \n    # Shipment scheduling\n    scheduled_pickup_date = db.Column(db.Date)\n    scheduled_delivery_date = db.Column(db.Date)\n    estimated_delivery_time = db.Column(db.String(20))  # morning, afternoon, evening\n    \n    # Timestamps\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    pickup_date = db.Column(db.DateTime)\n    delivery_date = db.Column(db.DateTime)\n    \n    # Internal comments\n    internal_comments = db.Column(db.Text)\n    \n    def __init__(self, **kwargs):\n        super(Order, self).__init__(**kwargs)\n        if not self.tracking_number:\n            self.tracking_number = self.generate_tracking_number()\n    \n    @staticmethod\n    def generate_tracking_number():\n        \"\"\"Generate unique tracking number in format AST-YYYY-XXX or KZ-YYYY-XXX\"\"\"\n        while True:\n            year = datetime.now().year\n            random_part = ''.join(random.choices(string.digits, k=3))\n            tracking_number = f\"AST-{year}-{random_part}\"\n            \n            # Check if tracking number already exists\n            if not Order.query.filter_by(tracking_number=tracking_number).first():\n                return tracking_number\n    \n    def get_status_display(self):\n        status_map = {\n            'new': 'Новая заявка',\n            'confirmed': 'Подтверждена',\n            'in_progress': 'В процессе доставки',\n            'delivered': 'Доставлена',\n            'cancelled': 'Отменена'\n        }\n        return status_map.get(self.status, self.status)\n    \n    def get_type_display(self):\n        type_map = {\n            'astana': 'Доставка по Астане',\n            'kazakhstan': 'Межгородская перевозка'\n        }\n        return type_map.get(self.order_type, self.order_type)\n    \n    # Relationships\n    assigned_driver = db.relationship('Driver', backref='orders')\n    \n    def __repr__(self):\n        return f'<Order {self.tracking_number}>'\n\nclass OrderStatusHistory(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    order_id = db.Column(db.Integer, db.ForeignKey('order.id'), nullable=False)\n    status = db.Column(db.String(20), nullable=False)\n    comment = db.Column(db.Text)\n    changed_by_id = db.Column(db.Integer, db.ForeignKey('user.id'))\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    order = db.relationship('Order', backref=db.backref('status_history', lazy=True))\n    changed_by = db.relationship('User', backref='status_changes')\n    \n    def __repr__(self):\n        return f'<OrderStatusHistory {self.order_id}: {self.status}>'\n","size_bytes":5676},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-login>=0.6.3\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"werkzeug>=3.1.3\",\n    \"wtforms>=3.2.1\",\n    \"flask-wtf>=1.2.2\",\n    \"requests>=2.32.4\",\n    \"sqlalchemy>=2.0.43\",\n]\n","size_bytes":425},"replit.md":{"content":"# XPOM-KZ Logistics Management System\n\n## Overview\nXPOM-KZ is a comprehensive logistics management web application built for the logistics department of \"Хром-КЗ\" company. The system automates order intake and management for deliveries within Astana and across Kazakhstan. It features a modern, minimalist public interface for customers to create and track orders, alongside a powerful administrative dashboard for logistics staff to manage operations, drivers, and analytics.\n\n## Recent Changes\n**Calendar Feature Added (August 13, 2025):**\n- Created modern minimalist admin panel with sidebar navigation\n- Added interactive shipment calendar using FullCalendar.js\n- Implemented calendar event management with color-coded status indicators\n- Added shipment scheduling functionality with date selection\n- Created order-to-driver assignment system within calendar\n- Added database columns for pickup/delivery scheduling\n- Sample data created for calendar demonstration\n\n**Migration Completed (August 13, 2025):**\n- Successfully migrated project from Replit Agent to Replit environment\n- All required Python packages installed and configured\n- PostgreSQL database provisioned and connected\n- Application running on Gunicorn server (port 5000)\n- Missing error templates (404.html, 500.html) created\n- Default admin account created: admin@xpom-kz.com / admin123\n- Full functionality restored and verified\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templating with Bootstrap 5 for responsive design\n- **UI/UX Design**: Modern minimalist interface with clean white backgrounds and primary blue color scheme\n- **JavaScript**: Vanilla JavaScript with Chart.js for analytics visualization\n- **CSS Framework**: Bootstrap 5 with custom CSS variables for consistent theming\n- **Icons**: Font Awesome for consistent iconography throughout the application\n\n### Backend Architecture\n- **Framework**: Flask (Python web framework) with modular structure\n- **Authentication**: Flask-Login for session management with role-based access control\n- **Form Handling**: Flask-WTF for secure form processing with CSRF protection\n- **Database ORM**: SQLAlchemy with declarative base for database operations\n- **Security**: CSRF protection, password hashing with Werkzeug, and proxy fix middleware\n\n### Data Models\n- **User Model**: Handles authentication with roles (employee, logist) and user profiles\n- **Order Model**: Core business entity with tracking numbers, status management, and customer details\n- **Driver Model**: Manages driver information and vehicle assignments\n- **OrderStatusHistory**: Tracks status changes for audit trail and customer updates\n\n### Application Structure\n- **app.py**: Application factory with extension initialization\n- **models.py**: SQLAlchemy database models and relationships\n- **routes.py**: Request handling and business logic routing\n- **forms.py**: WTForms for input validation and form rendering\n- **utils.py**: Helper functions for formatting and template filters\n- **main.py**: Application entry point for development server\n\n### Authentication & Authorization\n- **Role-based Access**: Two-tier system with employees (limited access) and logists (full access)\n- **Session Management**: Flask-Login handles user sessions and login persistence\n- **Password Security**: Werkzeug password hashing for secure credential storage\n\n### Order Management System\n- **Tracking System**: Unique tracking number generation (AST-YYYY-XXX, KZ-YYYY-XXX)\n- **Status Workflow**: Multi-stage order processing from 'new' to 'delivered'\n- **Customer Interface**: Public order creation and tracking without authentication required\n- **Admin Interface**: Comprehensive order management with status updates and driver assignment\n\n## External Dependencies\n\n### Core Dependencies\n- **Flask**: Web framework for request handling and routing\n- **SQLAlchemy**: Database ORM for data persistence and relationships\n- **Flask-Login**: User session management and authentication\n- **Flask-WTF**: Form handling with CSRF protection\n- **WTForms**: Form validation and rendering\n- **Werkzeug**: Password hashing and security utilities\n\n### Database\n- **SQLite**: Default database for development with configurable DATABASE_URL\n- **Connection Pool**: Configured with pool recycling and pre-ping for reliability\n\n### External Integrations\n- **Telegram Bot API**: Automated notifications to logistics team via requests library\n- **Environment Variables**: \n  - `TELEGRAM_BOT_TOKEN`: Bot authentication for message sending\n  - `TELEGRAM_CHAT_ID`: Target chat for order notifications\n  - `DATABASE_URL`: Database connection string\n  - `SESSION_SECRET`: Flask session encryption key\n\n### Frontend Libraries\n- **Bootstrap 5**: Responsive CSS framework from CDN\n- **Font Awesome 6**: Icon library for UI elements\n- **Chart.js**: Data visualization for analytics dashboard\n\n### Development Tools\n- **ProxyFix**: Werkzeug middleware for handling reverse proxy headers\n- **Logging**: Built-in Python logging configured for debugging\n- **Debug Mode**: Flask development server with hot reload capability","size_bytes":5197},"routes.py":{"content":"from flask import render_template, request, redirect, url_for, flash, jsonify\nfrom flask_login import login_user, logout_user, login_required, current_user\nfrom app import app, db\nfrom models import User, Order, Driver, OrderStatusHistory\nfrom forms import OrderForm, TrackingForm, RegistrationForm, LoginForm, AdminOrderForm, DriverForm\nfrom werkzeug.security import generate_password_hash\nfrom telegram_bot import send_telegram_notification\nfrom datetime import datetime, timedelta\nfrom sqlalchemy import func, extract\nimport logging\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/order/<order_type>')\ndef create_order(order_type):\n    if order_type not in ['astana', 'kazakhstan']:\n        flash('Неверный тип заказа', 'error')\n        return redirect(url_for('index'))\n    \n    form = OrderForm()\n    form.order_type.data = order_type\n    \n    order_title = 'Доставка по Астане' if order_type == 'astana' else 'Межгородская перевозка'\n    \n    return render_template('order_form.html', form=form, order_type=order_type, order_title=order_title)\n\n@app.route('/submit_order', methods=['POST'])\ndef submit_order():\n    form = OrderForm()\n    \n    if form.validate_on_submit():\n        try:\n            # Create new order\n            order = Order(\n                customer_name=form.customer_name.data,\n                customer_phone=form.customer_phone.data,\n                customer_email=form.customer_email.data,\n                order_type=form.order_type.data,\n                pickup_address=form.pickup_address.data,\n                pickup_contact=form.pickup_contact.data,\n                pickup_phone=form.pickup_phone.data,\n                delivery_address=form.delivery_address.data,\n                delivery_contact=form.delivery_contact.data,\n                delivery_phone=form.delivery_phone.data,\n                cargo_description=form.cargo_description.data,\n                cargo_weight=form.cargo_weight.data,\n                cargo_volume=form.cargo_volume.data,\n                cargo_dimensions=form.cargo_dimensions.data\n            )\n            \n            # If user is logged in, associate order with user\n            if current_user.is_authenticated:\n                order.customer_id = current_user.id\n            \n            db.session.add(order)\n            db.session.commit()\n            \n            # Send Telegram notification\n            try:\n                send_telegram_notification(order)\n            except Exception as e:\n                logging.error(f\"Failed to send Telegram notification: {e}\")\n            \n            flash(f'Заявка успешно создана! Ваш номер отслеживания: {order.tracking_number}', 'success')\n            return redirect(url_for('order_success', tracking_number=order.tracking_number))\n            \n        except Exception as e:\n            db.session.rollback()\n            logging.error(f\"Error creating order: {e}\")\n            flash('Произошла ошибка при создании заявки. Попробуйте еще раз.', 'error')\n    \n    # If validation failed, show form with errors\n    order_type = form.order_type.data or 'astana'\n    order_title = 'Доставка по Астане' if order_type == 'astana' else 'Межгородская перевозка'\n    \n    return render_template('order_form.html', form=form, order_type=order_type, order_title=order_title)\n\n@app.route('/order_success/<tracking_number>')\ndef order_success(tracking_number):\n    order = Order.query.filter_by(tracking_number=tracking_number).first()\n    if not order:\n        flash('Заказ не найден', 'error')\n        return redirect(url_for('index'))\n    \n    return render_template('order_status.html', order=order, success_page=True)\n\n@app.route('/track')\ndef track_order():\n    form = TrackingForm()\n    return render_template('track_order.html', form=form)\n\n@app.route('/track_result', methods=['POST'])\ndef track_result():\n    # Handle tracking request directly from form data\n    tracking_number = request.form.get('tracking_number', '').strip()\n    \n    if tracking_number:\n        tracking_number = tracking_number.upper()\n        order = Order.query.filter_by(tracking_number=tracking_number).first()\n        \n        if order:\n            return render_template('order_status.html', order=order)\n        else:\n            flash('Заказ с указанным номером не найден', 'error')\n    else:\n        flash('Пожалуйста, введите номер заявки', 'error')\n    \n    # Return to homepage if validation fails\n    return redirect(url_for('index'))\n\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if current_user.is_authenticated:\n        return redirect(url_for('profile'))\n    \n    form = RegistrationForm()\n    \n    if form.validate_on_submit():\n        # Check if passwords match\n        if form.password.data != form.confirm_password.data:\n            flash('Пароли не совпадают', 'error')\n            return render_template('register.html', form=form)\n        \n        # Check if user already exists\n        if User.query.filter_by(email=form.email.data).first():\n            flash('Пользователь с таким email уже существует', 'error')\n            return render_template('register.html', form=form)\n        \n        # Create new user\n        user = User(\n            full_name=form.full_name.data,\n            email=form.email.data,\n            phone=form.phone.data\n        )\n        user.set_password(form.password.data)\n        \n        db.session.add(user)\n        db.session.commit()\n        \n        # Associate existing orders with this user\n        existing_orders = Order.query.filter_by(customer_phone=user.phone, customer_id=None).all()\n        for order in existing_orders:\n            order.customer_id = user.id\n        db.session.commit()\n        \n        login_user(user)\n        flash('Регистрация успешна! Добро пожаловать в систему XPOM-KZ', 'success')\n        return redirect(url_for('profile'))\n    \n    return render_template('register.html', form=form)\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('profile'))\n    \n    form = LoginForm()\n    \n    if form.validate_on_submit():\n        user = User.query.filter_by(email=form.email.data).first()\n        \n        if user and user.check_password(form.password.data):\n            login_user(user)\n            next_page = request.args.get('next')\n            if next_page:\n                return redirect(next_page)\n            return redirect(url_for('profile'))\n        else:\n            flash('Неверный email или пароль', 'error')\n    \n    return render_template('login.html', form=form)\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    flash('Вы успешно вышли из системы', 'info')\n    return redirect(url_for('index'))\n\n@app.route('/profile')\n@login_required\ndef profile():\n    orders = Order.query.filter_by(customer_id=current_user.id).order_by(Order.created_at.desc()).all()\n    return render_template('profile.html', orders=orders)\n\n# Admin routes\n@app.route('/admin')\n@login_required\ndef admin_dashboard():\n    if not current_user.is_logist():\n        flash('У вас нет прав доступа к административной панели', 'error')\n        return redirect(url_for('index'))\n    \n    # Get statistics\n    total_orders = Order.query.count()\n    new_orders = Order.query.filter_by(status='new').count()\n    in_progress_orders = Order.query.filter_by(status='in_progress').count()\n    delivered_orders = Order.query.filter_by(status='delivered').count()\n    \n    # Recent orders\n    recent_orders = Order.query.order_by(Order.created_at.desc()).limit(10).all()\n    \n    stats = {\n        'total_orders': total_orders,\n        'new_orders': new_orders,\n        'in_progress_orders': in_progress_orders,\n        'delivered_orders': delivered_orders\n    }\n    \n    return render_template('admin/dashboard.html', stats=stats, recent_orders=recent_orders)\n\n@app.route('/admin/orders')\n@login_required\ndef admin_orders():\n    if not current_user.is_logist():\n        flash('У вас нет прав доступа к административной панели', 'error')\n        return redirect(url_for('index'))\n    \n    # Get filter parameters\n    status_filter = request.args.get('status', '')\n    order_type_filter = request.args.get('type', '')\n    \n    # Build query\n    query = Order.query\n    \n    if status_filter:\n        query = query.filter_by(status=status_filter)\n    \n    if order_type_filter:\n        query = query.filter_by(order_type=order_type_filter)\n    \n    orders = query.order_by(Order.created_at.desc()).all()\n    \n    return render_template('admin/orders.html', orders=orders, \n                         status_filter=status_filter, order_type_filter=order_type_filter)\n\n@app.route('/admin/order/<int:order_id>')\n@login_required\ndef admin_order_detail(order_id):\n    if not current_user.is_logist():\n        flash('У вас нет прав доступа к административной панели', 'error')\n        return redirect(url_for('index'))\n    \n    order = Order.query.get_or_404(order_id)\n    drivers = Driver.query.filter_by(is_active=True).all()\n    \n    return render_template('admin/order_detail.html', order=order, drivers=drivers)\n\n@app.route('/admin/order/<int:order_id>/update', methods=['POST'])\n@login_required\ndef admin_update_order(order_id):\n    if not current_user.is_logist():\n        flash('У вас нет прав доступа к административной панели', 'error')\n        return redirect(url_for('index'))\n    \n    try:\n        order = Order.query.get_or_404(order_id)\n        \n        # Update order fields\n        order.status = request.form.get('status')\n        order.price = float(request.form.get('price')) if request.form.get('price') else None\n        order.internal_comments = request.form.get('internal_comments')\n        \n        # Handle driver assignment\n        driver_id = request.form.get('driver_id')\n        if driver_id and driver_id != '0':\n            order.driver_id = int(driver_id)\n        else:\n            order.driver_id = None\n            \n        order.updated_at = datetime.utcnow()\n        \n        db.session.commit()\n        flash('Заказ успешно обновлен', 'success')\n        \n    except Exception as e:\n        db.session.rollback()\n        flash('Ошибка при обновлении заказа', 'error')\n        \n    return redirect(url_for('admin_order_detail', order_id=order_id))\n\n@app.route('/admin/order/<int:order_id>/complete', methods=['POST'])\n@login_required\ndef admin_complete_order(order_id):\n    if not current_user.is_logist():\n        flash('У вас нет прав доступа к административной панели', 'error')\n        return redirect(url_for('index'))\n    \n    try:\n        order = Order.query.get_or_404(order_id)\n        order.status = 'delivered'\n        order.delivery_date = datetime.utcnow()\n        order.updated_at = datetime.utcnow()\n        \n        db.session.commit()\n        flash('Заказ отмечен как выполненный', 'success')\n        \n    except Exception as e:\n        db.session.rollback()\n        flash('Ошибка при обновлении заказа', 'error')\n        \n    return redirect(url_for('admin_order_detail', order_id=order_id))\n\n@app.route('/admin/reports')\n@login_required\ndef admin_reports():\n    if not current_user.is_logist():\n        flash('У вас нет прав доступа к административной панели', 'error')\n        return redirect(url_for('index'))\n    \n    # Get date range (default: last 30 days)\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=30)\n    \n    # Basic statistics\n    total_orders = Order.query.filter(Order.created_at >= start_date).count()\n    total_revenue = db.session.query(func.sum(Order.price)).filter(\n        Order.created_at >= start_date, Order.price.isnot(None)\n    ).scalar() or 0\n    \n    avg_cost = total_revenue / total_orders if total_orders > 0 else 0\n    \n    # Orders by type\n    astana_orders = Order.query.filter(\n        Order.created_at >= start_date, Order.order_type == 'astana'\n    ).count()\n    kz_orders = Order.query.filter(\n        Order.created_at >= start_date, Order.order_type == 'kazakhstan'\n    ).count()\n    \n    # Driver statistics\n    driver_stats = db.session.query(\n        Driver.full_name,\n        func.count(Order.id).label('order_count'),\n        func.sum(Order.price).label('total_cost')\n    ).join(Order, Driver.id == Order.driver_id).filter(\n        Order.created_at >= start_date\n    ).group_by(Driver.id, Driver.full_name).all()\n    \n    stats = {\n        'total_orders': total_orders,\n        'total_revenue': total_revenue,\n        'avg_cost': avg_cost,\n        'astana_orders': astana_orders,\n        'kz_orders': kz_orders,\n        'driver_stats': driver_stats,\n        'period': f\"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\"\n    }\n    \n    return render_template('admin/reports.html', stats=stats)\n\n@app.route('/admin/analytics')\n@login_required\ndef admin_analytics():\n    if not current_user.is_logist():\n        flash('У вас нет прав доступа к административной панели', 'error')\n        return redirect(url_for('index'))\n    \n    # Get monthly order data for the last 12 months\n    monthly_data = []\n    for i in range(11, -1, -1):\n        date = datetime.now().replace(day=1) - timedelta(days=i*30)\n        month_start = date.replace(day=1)\n        if i == 0:\n            month_end = datetime.now()\n        else:\n            next_month = month_start.replace(month=month_start.month+1) if month_start.month < 12 else month_start.replace(year=month_start.year+1, month=1)\n            month_end = next_month - timedelta(days=1)\n        \n        order_count = Order.query.filter(\n            Order.created_at >= month_start,\n            Order.created_at <= month_end\n        ).count()\n        \n        revenue = db.session.query(func.sum(Order.price)).filter(\n            Order.created_at >= month_start,\n            Order.created_at <= month_end,\n            Order.price.isnot(None)\n        ).scalar() or 0\n        \n        monthly_data.append({\n            'month': month_start.strftime('%Y-%m'),\n            'month_name': month_start.strftime('%B %Y'),\n            'orders': order_count,\n            'revenue': float(revenue)\n        })\n    \n    # Status distribution\n    status_data = []\n    statuses = ['new', 'confirmed', 'in_progress', 'delivered', 'cancelled']\n    for status in statuses:\n        count = Order.query.filter_by(status=status).count()\n        status_data.append({\n            'status': status,\n            'count': count,\n            'label': Order().get_status_display() if status == 'new' else {\n                'confirmed': 'Подтверждена',\n                'in_progress': 'В процессе доставки',\n                'delivered': 'Доставлена',\n                'cancelled': 'Отменена'\n            }.get(status, status)\n        })\n    \n    return render_template('admin/analytics.html', \n                         monthly_data=monthly_data, \n                         status_data=status_data)\n\n@app.route('/admin/calendar')\n@login_required\ndef admin_calendar():\n    if not current_user.is_logist():\n        flash('У вас нет прав доступа к административной панели', 'error')\n        return redirect(url_for('index'))\n    \n    # Get orders without scheduled dates for planning\n    available_orders = Order.query.filter(\n        Order.status.in_(['new', 'confirmed']),\n        Order.scheduled_pickup_date.is_(None)\n    ).all()\n    \n    # Get active drivers\n    drivers = Driver.query.filter(Driver.is_active == True).all()\n    \n    return render_template('admin/calendar.html', \n                         available_orders=available_orders, \n                         drivers=drivers)\n\n@app.route('/admin/calendar/events')\n@login_required  \ndef admin_calendar_events():\n    if not current_user.is_logist():\n        return jsonify({'error': 'Access denied'}), 403\n    \n    # Get orders with scheduled dates\n    orders = Order.query.filter(\n        db.or_(\n            Order.scheduled_pickup_date.isnot(None),\n            Order.scheduled_delivery_date.isnot(None)\n        )\n    ).all()\n    \n    events = []\n    \n    for order in orders:\n        # Pickup event\n        if order.scheduled_pickup_date:\n            event_type = 'pickup'\n            if order.status == 'cancelled':\n                event_type = 'cancelled'\n            elif order.scheduled_pickup_date < datetime.now().date() and order.status != 'delivered':\n                event_type = 'overdue'\n                \n            events.append({\n                'id': f'pickup_{order.id}',\n                'title': f'Забор: {order.tracking_number}',\n                'start': order.scheduled_pickup_date.isoformat(),\n                'backgroundColor': '#3b82f6' if event_type == 'pickup' else ('#f59e0b' if event_type == 'overdue' else '#ef4444'),\n                'borderColor': '#3b82f6' if event_type == 'pickup' else ('#f59e0b' if event_type == 'overdue' else '#ef4444'),\n                'extendedProps': {\n                    'order_id': order.id,\n                    'type': event_type,\n                    'event_type': 'pickup'\n                }\n            })\n        \n        # Delivery event  \n        if order.scheduled_delivery_date:\n            event_type = 'delivery'\n            if order.status == 'cancelled':\n                event_type = 'cancelled'\n            elif order.scheduled_delivery_date < datetime.now().date() and order.status != 'delivered':\n                event_type = 'overdue'\n                \n            events.append({\n                'id': f'delivery_{order.id}',\n                'title': f'Доставка: {order.tracking_number}',\n                'start': order.scheduled_delivery_date.isoformat(),\n                'backgroundColor': '#10b981' if event_type == 'delivery' else ('#f59e0b' if event_type == 'overdue' else '#ef4444'),\n                'borderColor': '#10b981' if event_type == 'delivery' else ('#f59e0b' if event_type == 'overdue' else '#ef4444'),\n                'extendedProps': {\n                    'order_id': order.id,\n                    'type': event_type,\n                    'event_type': 'delivery'\n                }\n            })\n    \n    return jsonify(events)\n\n@app.route('/admin/calendar/event/<int:order_id>')\n@login_required\ndef admin_calendar_event_details(order_id):\n    if not current_user.is_logist():\n        return jsonify({'error': 'Access denied'}), 403\n    \n    order = Order.query.get_or_404(order_id)\n    \n    return jsonify({\n        'tracking_number': order.tracking_number,\n        'customer_name': order.customer_name,\n        'customer_phone': order.customer_phone,\n        'order_type': order.order_type,\n        'driver_name': order.assigned_driver.full_name if order.assigned_driver else None,\n        'scheduled_pickup_date': order.scheduled_pickup_date.strftime('%d.%m.%Y') if order.scheduled_pickup_date else None,\n        'scheduled_delivery_date': order.scheduled_delivery_date.strftime('%d.%m.%Y') if order.scheduled_delivery_date else None,\n        'pickup_address': order.pickup_address,\n        'delivery_address': order.delivery_address,\n        'status': order.status,\n        'status_display': order.get_status_display()\n    })\n\n@app.route('/admin/schedule_shipment', methods=['POST'])\n@login_required\ndef admin_schedule_shipment():\n    if not current_user.is_logist():\n        return jsonify({'error': 'Access denied'}), 403\n    \n    try:\n        order_id = request.form.get('order_id')\n        driver_id = request.form.get('driver_id')\n        pickup_date = datetime.strptime(request.form.get('pickup_date'), '%Y-%m-%d').date()\n        delivery_date = datetime.strptime(request.form.get('delivery_date'), '%Y-%m-%d').date()\n        \n        order = Order.query.get_or_404(order_id)\n        \n        # Update order with scheduled dates\n        order.scheduled_pickup_date = pickup_date\n        order.scheduled_delivery_date = delivery_date\n        order.driver_id = driver_id\n        order.status = 'confirmed'\n        \n        db.session.commit()\n        \n        return jsonify({'success': True, 'message': 'Отгрузка запланирована успешно'})\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'message': 'Ошибка при планировании отгрузки'})\n\n@app.route('/admin/orders/<int:order_id>/complete', methods=['POST'])\n@login_required\ndef admin_complete_order_old(order_id):\n    if not current_user.is_logist():\n        return jsonify({'error': 'Access denied'}), 403\n    \n    try:\n        order = Order.query.get_or_404(order_id)\n        order.status = 'delivered'\n        order.actual_delivery_date = datetime.now().date()\n        \n        db.session.commit()\n        \n        return jsonify({'success': True, 'message': 'Заказ отмечен как выполненный'})\n        \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'success': False, 'message': 'Ошибка при обновлении статуса'})\n\n@app.errorhandler(404)\ndef not_found_error(error):\n    return render_template('404.html'), 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    db.session.rollback()\n    return render_template('500.html'), 500\n","size_bytes":21954},"telegram_bot.py":{"content":"import requests\nimport logging\nimport os\nfrom models import Order\n\n# Get Telegram bot configuration from environment variables\nTELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '')\nTELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', '')\n\ndef send_telegram_notification(order):\n    \"\"\"Send notification about new order to Telegram\"\"\"\n    \n    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:\n        logging.warning(\"Telegram bot token or chat ID not configured\")\n        return False\n    \n    try:\n        # Prepare message text\n        message_text = f\"\"\"\n🆕 *Новая заявка XPOM-KZ*\n\n📋 *Номер:* `{order.tracking_number}`\n👤 *Клиент:* {order.customer_name}\n📞 *Телефон:* {order.customer_phone}\n📧 *Email:* {order.customer_email or 'Не указан'}\n\n🚚 *Тип заказа:* {order.get_type_display()}\n\n📍 *Забор:* {order.pickup_address}\n📍 *Доставка:* {order.delivery_address}\n\n📦 *Груз:* {order.cargo_description}\n⚖️ *Вес:* {order.cargo_weight or 'Не указан'} кг\n📏 *Габариты:* {order.cargo_dimensions or 'Не указаны'}\n\n🕐 *Создана:* {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\"\"\"\n\n        # Send message\n        url = f\"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage\"\n        \n        data = {\n            'chat_id': TELEGRAM_CHAT_ID,\n            'text': message_text,\n            'parse_mode': 'Markdown'\n        }\n        \n        response = requests.post(url, data=data, timeout=10)\n        \n        if response.status_code == 200:\n            logging.info(f\"Telegram notification sent for order {order.tracking_number}\")\n            return True\n        else:\n            logging.error(f\"Failed to send Telegram notification: {response.status_code} - {response.text}\")\n            return False\n            \n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Network error sending Telegram notification: {e}\")\n        return False\n    except Exception as e:\n        logging.error(f\"Unexpected error sending Telegram notification: {e}\")\n        return False\n\ndef send_status_update_notification(order, old_status, new_status):\n    \"\"\"Send notification about order status update\"\"\"\n    \n    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:\n        return False\n    \n    try:\n        status_map = {\n            'new': 'Новая заявка',\n            'confirmed': 'Подтверждена',\n            'in_progress': 'В процессе доставки',\n            'delivered': 'Доставлена',\n            'cancelled': 'Отменена'\n        }\n        \n        message_text = f\"\"\"\n🔄 *Обновление статуса заказа*\n\n📋 *Номер:* `{order.tracking_number}`\n👤 *Клиент:* {order.customer_name}\n\n📊 *Статус изменен:*\n❌ Было: {status_map.get(old_status, old_status)}\n✅ Стало: {status_map.get(new_status, new_status)}\n\n🕐 *Обновлено:* {order.updated_at.strftime('%d.%m.%Y %H:%M')}\n\"\"\"\n\n        url = f\"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage\"\n        \n        data = {\n            'chat_id': TELEGRAM_CHAT_ID,\n            'text': message_text,\n            'parse_mode': 'Markdown'\n        }\n        \n        response = requests.post(url, data=data, timeout=10)\n        \n        if response.status_code == 200:\n            logging.info(f\"Status update notification sent for order {order.tracking_number}\")\n            return True\n        else:\n            logging.error(f\"Failed to send status update notification: {response.status_code} - {response.text}\")\n            return False\n            \n    except Exception as e:\n        logging.error(f\"Error sending status update notification: {e}\")\n        return False\n","size_bytes":3801},"utils.py":{"content":"from datetime import datetime\nimport re\n\ndef format_phone(phone):\n    \"\"\"Format phone number to standard Kazakhstan format\"\"\"\n    # Remove all non-digit characters\n    digits = re.sub(r'\\D', '', phone)\n    \n    # Add country code if not present\n    if len(digits) == 10 and digits.startswith('7'):\n        digits = '7' + digits\n    elif len(digits) == 10:\n        digits = '7' + digits\n    \n    # Format as +7 (XXX) XXX-XX-XX\n    if len(digits) == 11 and digits.startswith('7'):\n        return f\"+7 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}\"\n    \n    return phone\n\ndef format_datetime(dt):\n    \"\"\"Format datetime for display\"\"\"\n    if not dt:\n        return \"\"\n    return dt.strftime('%d.%m.%Y %H:%M')\n\ndef format_date(dt):\n    \"\"\"Format date for display\"\"\"\n    if not dt:\n        return \"\"\n    return dt.strftime('%d.%m.%Y')\n\ndef calculate_days_ago(dt):\n    \"\"\"Calculate how many days ago the datetime was\"\"\"\n    if not dt:\n        return \"\"\n    \n    days = (datetime.utcnow() - dt).days\n    \n    if days == 0:\n        return \"Сегодня\"\n    elif days == 1:\n        return \"Вчера\"\n    else:\n        return f\"{days} дней назад\"\n\n# Template filters registration function\ndef register_template_filters(app):\n    \"\"\"Register custom template filters with the Flask app\"\"\"\n    \n    @app.template_filter('format_phone')\n    def format_phone_filter(phone):\n        return format_phone(phone)\n\n    @app.template_filter('format_datetime')\n    def format_datetime_filter(dt):\n        return format_datetime(dt)\n\n    @app.template_filter('format_date')\n    def format_date_filter(dt):\n        return format_date(dt)\n\n    @app.template_filter('days_ago')\n    def days_ago_filter(dt):\n        return calculate_days_ago(dt)\n","size_bytes":1746},"static/css/style.css":{"content":"/* XPOM-KZ Custom Styles */\n\n:root {\n    --primary-color: #4e73df;\n    --primary-dark: #3e5bcc;\n    --success-color: #1cc88a;\n    --warning-color: #f6c23e;\n    --danger-color: #e74a3b;\n    --info-color: #36b9cc;\n    --purple-color: #6f42c1;\n    --light-color: #f8f9fc;\n    --dark-color: #2c3e50;\n    --gray-100: #f8f9fa;\n    --gray-200: #e3e6f0;\n    --gray-300: #dddfeb;\n    --gray-400: #d1d3e2;\n    --gray-500: #b7b9cc;\n    --gray-600: #858796;\n    --gray-700: #6e707e;\n    --gray-800: #5a5c69;\n    --gray-900: #3a3b45;\n    --shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);\n    --shadow-lg: 0 1rem 3rem rgba(0, 0, 0, 0.175);\n}\n\n/* Base Styles */\nbody {\n    font-family: 'Nunito', -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n    background-color: var(--light-color);\n    color: var(--gray-800);\n    line-height: 1.6;\n}\n\n/* Navigation */\n.navbar-brand {\n    font-weight: 700;\n    font-size: 1.2rem;\n}\n\n.brand-name {\n    font-weight: 800;\n    font-size: 1.3rem;\n    color: var(--primary-color);\n}\n\n.brand-subtitle {\n    font-size: 0.75rem;\n    color: var(--gray-600);\n    font-weight: 400;\n}\n\n.brand-icon {\n    width: 45px;\n    height: 45px;\n    background: linear-gradient(135deg, #4e73df, #6f42c1);\n    border-radius: 12px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-size: 1.3rem;\n}\n\n.nav-text-status {\n    display: flex;\n    align-items: center;\n    color: #1cc88a;\n    font-size: 0.9rem;\n    font-weight: 600;\n    padding: 8px 15px;\n    background: rgba(28, 200, 138, 0.1);\n    border-radius: 20px;\n}\n\n.btn-navbar {\n    background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);\n    border: none;\n    color: white;\n    font-weight: 600;\n    padding: 10px 25px;\n    border-radius: 25px;\n    transition: all 0.3s ease;\n    text-decoration: none;\n    font-size: 0.9rem;\n}\n\n.btn-navbar:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(78, 115, 223, 0.3);\n    color: white;\n    text-decoration: none;\n}\n\n/* Hero Section */\n.hero-section {\n    padding: 100px 0 60px 0;\n    background: linear-gradient(135deg, #f8f9fc 0%, #e3e6f0 50%, #f8f9fc 100%);\n    color: #2c3e50;\n    position: relative;\n    overflow: hidden;\n}\n\n.hero-title {\n    font-size: 3.5rem;\n    font-weight: 800;\n    margin-bottom: 1.5rem;\n    line-height: 1.1;\n    background: linear-gradient(135deg, #4e73df 0%, #6f42c1 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.hero-title .text-dark {\n    background: #2c3e50;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n}\n\n.hero-subtitle {\n    font-size: 1.1rem;\n    color: #6e707e;\n    font-weight: 400;\n    margin-bottom: 2rem;\n    line-height: 1.6;\n}\n\n/* Service Cards */\n.services-section {\n    padding: 80px 0;\n    background: white;\n}\n\n.service-card {\n    background: white;\n    border-radius: 20px;\n    padding: 40px 30px;\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n    border: 0;\n    transition: all 0.3s ease;\n    text-align: center;\n    height: 100%;\n    border-top: 4px solid transparent;\n}\n\n.service-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 40px rgba(0, 0, 0, 0.12);\n}\n\n.service-icon {\n    width: 80px;\n    height: 80px;\n    border-radius: 20px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto 25px;\n    font-size: 2rem;\n    color: white;\n}\n\n.service-icon-blue {\n    background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);\n}\n\n.service-icon-purple {\n    background: linear-gradient(135deg, #6f42c1 0%, #5a359c 100%);\n}\n\n.service-icon-green {\n    background: linear-gradient(135deg, #1cc88a 0%, #17a673 100%);\n}\n\n.service-title {\n    font-size: 1.5rem;\n    font-weight: 700;\n    color: #2c3e50;\n    margin-bottom: 15px;\n}\n\n.service-description {\n    color: #6e707e;\n    font-size: 1rem;\n    line-height: 1.6;\n    margin-bottom: 0;\n}\n\n/* Track Section */\n.track-section {\n    padding: 80px 0;\n    background: #f8f9fc;\n}\n\n.track-card {\n    background: white;\n    border-radius: 20px;\n    padding: 50px 40px;\n    box-shadow: 0 4px 25px rgba(0, 0, 0, 0.08);\n    border: 0;\n    text-align: center;\n}\n\n.track-title {\n    font-size: 2rem;\n    font-weight: 700;\n    color: #2c3e50;\n    margin-bottom: 30px;\n}\n\n.track-label {\n    font-size: 1rem;\n    font-weight: 600;\n    color: #5a5c69;\n    margin-bottom: 8px;\n    display: block;\n}\n\n.track-input {\n    border: 2px solid #e3e6f0;\n    border-radius: 12px;\n    padding: 18px 20px;\n    font-size: 1rem;\n    transition: all 0.3s ease;\n    background: #f8f9fc;\n}\n\n.track-input:focus {\n    border-color: #4e73df;\n    box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);\n    background: white;\n}\n\n.btn-track {\n    background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);\n    border: none;\n    border-radius: 12px;\n    padding: 18px 30px;\n    font-size: 1.1rem;\n    font-weight: 600;\n    color: white;\n    transition: all 0.3s ease;\n    margin-top: 15px;\n}\n\n.btn-track:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(78, 115, 223, 0.3);\n    color: white;\n}\n\n/* Main Services */\n.main-services {\n    padding: 80px 0;\n    background: #f8f9fc;\n}\n\n.section-title {\n    font-size: 2.5rem;\n    font-weight: 800;\n    color: #2c3e50;\n    margin-bottom: 1rem;\n}\n\n.section-subtitle {\n    font-size: 1.1rem;\n    color: #6e707e;\n    margin-bottom: 3rem;\n}\n\n.main-service-card {\n    background: white;\n    border-radius: 20px;\n    padding: 40px 35px;\n    box-shadow: 0 4px 25px rgba(0, 0, 0, 0.08);\n    border: 0;\n    height: 100%;\n    transition: all 0.3s ease;\n}\n\n.main-service-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 40px rgba(0, 0, 0, 0.12);\n}\n\n.service-header {\n    display: flex;\n    align-items: center;\n    margin-bottom: 30px;\n}\n\n.service-icon-main {\n    width: 70px;\n    height: 70px;\n    border-radius: 16px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-right: 20px;\n    color: white;\n    font-size: 1.8rem;\n    flex-shrink: 0;\n}\n\n.service-header-text h3 {\n    font-size: 1.4rem;\n    font-weight: 700;\n    color: #2c3e50;\n    margin-bottom: 5px;\n}\n\n.service-header-text p {\n    font-size: 0.95rem;\n    color: #6e707e;\n    margin-bottom: 0;\n}\n\n.service-list {\n    list-style: none;\n    padding: 0;\n    margin-bottom: 30px;\n}\n\n.service-list li {\n    padding: 8px 0;\n    font-size: 0.95rem;\n    color: #5a5c69;\n    display: flex;\n    align-items: center;\n}\n\n.service-list li i {\n    margin-right: 12px;\n    color: #1cc88a;\n    font-size: 0.9rem;\n}\n\n.btn-service {\n    border: none;\n    border-radius: 12px;\n    padding: 16px 30px;\n    font-size: 1rem;\n    font-weight: 600;\n    color: white;\n    transition: all 0.3s ease;\n    text-decoration: none;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.btn-service:hover {\n    transform: translateY(-2px);\n    color: white;\n    text-decoration: none;\n}\n\n.btn-service-green {\n    background: linear-gradient(135deg, #1cc88a 0%, #17a673 100%);\n}\n\n.btn-service-green:hover {\n    box-shadow: 0 8px 25px rgba(28, 200, 138, 0.3);\n}\n\n.btn-service-blue {\n    background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);\n}\n\n.btn-service-blue:hover {\n    box-shadow: 0 8px 25px rgba(78, 115, 223, 0.3);\n}\n\n/* Contact Section */\n.contact-section {\n    padding: 80px 0;\n    background: white;\n}\n\n.contact-card {\n    background: white;\n    border-radius: 20px;\n    padding: 40px;\n    box-shadow: 0 4px 25px rgba(0, 0, 0, 0.08);\n    border: 0;\n    height: 100%;\n}\n\n.advantages-card {\n    background: #f8f9fc;\n    border-radius: 20px;\n    padding: 35px 30px;\n    box-shadow: 0 4px 25px rgba(0, 0, 0, 0.08);\n    border: 0;\n    height: 100%;\n}\n\n.contact-methods .contact-method {\n    display: flex;\n    align-items: center;\n    margin-bottom: 1.5rem;\n    padding: 15px;\n    background: #f8f9fc;\n    border-radius: 12px;\n}\n\n.contact-icon {\n    width: 50px;\n    height: 50px;\n    border-radius: 12px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    margin-right: 1rem;\n    font-size: 1.1rem;\n    flex-shrink: 0;\n}\n\n.contact-icon.phone {\n    background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);\n}\n\n.contact-icon.email {\n    background: linear-gradient(135deg, #1cc88a 0%, #17a673 100%);\n}\n\n.advantage-item {\n    display: flex;\n    align-items: flex-start;\n    margin-bottom: 1.2rem;\n    padding: 12px 0;\n}\n\n.advantage-item i {\n    margin-right: 0.75rem;\n    margin-top: 0.25rem;\n    font-size: 1.1rem;\n}\n\n.advantage-item strong {\n    color: #2c3e50;\n    font-size: 1rem;\n}\n\n.advantage-item small {\n    color: #6e707e;\n    font-size: 0.9rem;\n}\n\n/* Footer */\n.footer-modern {\n    background: #2c3e50;\n    color: #ecf0f1;\n    padding: 60px 0 30px 0;\n    margin-top: 80px;\n}\n\n.footer-brand {\n    font-size: 1.5rem;\n    font-weight: 800;\n    color: white;\n    margin-bottom: 10px;\n    display: block;\n}\n\n.footer-description {\n    color: #bdc3c7;\n    font-size: 0.95rem;\n    line-height: 1.5;\n}\n\n.footer-contact {\n    color: #ecf0f1;\n}\n\n.footer-heading {\n    color: #ecf0f1;\n    font-size: 1rem;\n    font-weight: 600;\n    margin-bottom: 8px;\n}\n\n.footer-phone {\n    color: #3498db;\n    font-size: 1.1rem;\n    font-weight: 600;\n    margin-bottom: 0;\n}\n\n.footer-email {\n    color: #2ecc71;\n    font-size: 1rem;\n    margin-bottom: 0;\n}\n\n.footer-bottom {\n    border-top: 1px solid #34495e;\n    margin-top: 40px;\n    padding-top: 25px;\n    text-align: center;\n}\n\n.footer-copyright {\n    color: #95a5a6;\n    font-size: 0.9rem;\n    margin-bottom: 0;\n}\n\n/* Buttons */\n.btn-gradient {\n    background: linear-gradient(135deg, var(--primary-color), var(--purple-color));\n    border: none;\n    color: white;\n    font-weight: 600;\n    padding: 0.75rem 2rem;\n    border-radius: 12px;\n    transition: all 0.3s ease;\n}\n\n.btn-gradient:hover {\n    background: linear-gradient(135deg, var(--primary-dark), #5a32a3);\n    color: white;\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(78, 115, 223, 0.3);\n}\n\n.btn-lg {\n    padding: 1rem 2.5rem;\n    font-size: 1.1rem;\n}\n\n/* Forms */\n.form-section {\n    margin-bottom: 2.5rem;\n    padding-bottom: 2rem;\n    border-bottom: 1px solid var(--gray-200);\n}\n\n.form-section:last-child {\n    border-bottom: none;\n    margin-bottom: 0;\n}\n\n.section-title {\n    font-size: 1.3rem;\n    font-weight: 700;\n    color: var(--gray-800);\n    margin-bottom: 1.5rem;\n    display: flex;\n    align-items: center;\n}\n\n.section-title i {\n    margin-right: 0.75rem;\n    font-size: 1.1rem;\n}\n\n.form-label.required::after {\n    content: \" *\";\n    color: var(--danger-color);\n}\n\n.form-control {\n    border: 1px solid var(--gray-300);\n    border-radius: 8px;\n    padding: 0.75rem 1rem;\n    transition: all 0.3s ease;\n}\n\n.form-control:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(78, 115, 223, 0.25);\n}\n\n/* Order Status */\n.success-icon {\n    width: 120px;\n    height: 120px;\n    margin: 0 auto 2rem;\n    background: linear-gradient(135deg, var(--success-color), #17a085);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-size: 4rem;\n}\n\n.status-timeline {\n    position: relative;\n}\n\n.timeline {\n    position: relative;\n    padding-left: 3rem;\n}\n\n.timeline::before {\n    content: '';\n    position: absolute;\n    left: 1.5rem;\n    top: 0;\n    bottom: 0;\n    width: 2px;\n    background: var(--gray-300);\n}\n\n.timeline-item {\n    position: relative;\n    margin-bottom: 2rem;\n    padding-left: 1.5rem;\n}\n\n.timeline-marker {\n    position: absolute;\n    left: -2.25rem;\n    top: 0.25rem;\n    width: 2.5rem;\n    height: 2.5rem;\n    background: var(--gray-300);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-size: 0.9rem;\n    z-index: 1;\n}\n\n.timeline-item.active .timeline-marker {\n    background: var(--warning-color);\n}\n\n.timeline-item.completed .timeline-marker {\n    background: var(--success-color);\n}\n\n.timeline-content h6 {\n    font-weight: 700;\n    color: var(--gray-800);\n    margin-bottom: 0.25rem;\n}\n\n.info-section {\n    margin-bottom: 2rem;\n    padding-bottom: 1.5rem;\n    border-bottom: 1px solid var(--gray-200);\n}\n\n.info-section:last-child {\n    border-bottom: none;\n}\n\n.info-section .section-title {\n    font-size: 1.1rem;\n    margin-bottom: 1rem;\n}\n\n.info-list {\n    margin-bottom: 0;\n}\n\n.info-list dt {\n    font-weight: 600;\n    color: var(--gray-700);\n    font-size: 0.9rem;\n}\n\n.info-list dd {\n    margin-bottom: 0.5rem;\n    color: var(--gray-800);\n}\n\n.route-info {\n    position: relative;\n}\n\n.route-point {\n    display: flex;\n    align-items: flex-start;\n    margin-bottom: 1rem;\n}\n\n.route-icon {\n    margin-right: 1rem;\n    margin-top: 0.25rem;\n    font-size: 1.2rem;\n}\n\n.route-details {\n    flex: 1;\n}\n\n.route-arrow {\n    text-align: center;\n    margin: 0.5rem 0;\n}\n\n.info-card {\n    background: var(--gray-100);\n    border-radius: 12px;\n    padding: 1.5rem;\n    margin-bottom: 1rem;\n}\n\n.info-card h6 {\n    font-weight: 700;\n    color: var(--gray-800);\n    margin-bottom: 1rem;\n}\n\n.info-card ul {\n    margin-bottom: 0;\n}\n\n.info-card li {\n    margin-bottom: 0.5rem;\n    font-size: 0.9rem;\n}\n\n/* Authentication */\n.auth-card {\n    background: white;\n    border-radius: 20px;\n    padding: 50px 40px;\n    box-shadow: var(--shadow-lg);\n    border: 0;\n}\n\n.auth-icon {\n    width: 80px;\n    height: 80px;\n    background: linear-gradient(135deg, var(--primary-color), var(--purple-color));\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto 1.5rem;\n    color: white;\n    font-size: 2rem;\n}\n\n.benefits-section {\n    margin-top: 2rem;\n}\n\n.benefits-section h6 {\n    color: var(--gray-800);\n    font-weight: 700;\n    margin-bottom: 1rem;\n}\n\n.benefits-section li {\n    margin-bottom: 0.75rem;\n    font-size: 0.9rem;\n    color: var(--gray-700);\n}\n\n.demo-credentials {\n    background: var(--light-color);\n    border: 1px solid var(--gray-300);\n    border-radius: 12px;\n}\n\n.demo-credentials h6 {\n    color: var(--gray-800);\n    font-weight: 700;\n}\n\n/* Profile */\n.profile-avatar {\n    width: 100px;\n    height: 100px;\n    background: linear-gradient(135deg, var(--primary-color), var(--purple-color));\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0 auto 1rem;\n    color: white;\n    font-size: 3rem;\n}\n\n.profile-info dt {\n    font-weight: 600;\n    color: var(--gray-700);\n    font-size: 0.9rem;\n}\n\n.profile-info dd {\n    margin-bottom: 0.75rem;\n    color: var(--gray-800);\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 1rem;\n}\n\n.stat-item {\n    text-align: center;\n    padding: 1rem;\n    background: var(--light-color);\n    border-radius: 12px;\n}\n\n.stat-number {\n    font-size: 1.8rem;\n    font-weight: 800;\n    color: var(--primary-color);\n    margin-bottom: 0.25rem;\n}\n\n.stat-label {\n    font-size: 0.8rem;\n    color: var(--gray-600);\n    font-weight: 600;\n}\n\n.admin-actions {\n    border-top: 1px solid var(--gray-200);\n}\n\n.empty-state {\n    padding: 3rem 2rem;\n}\n\n.empty-state i {\n    margin-bottom: 1rem;\n}\n\n.empty-state h5 {\n    color: var(--gray-600);\n    margin-bottom: 0.5rem;\n}\n\n/* Admin Panel */\n.admin-body {\n    background-color: var(--light-color);\n}\n\n.admin-main {\n    min-height: calc(100vh - 56px);\n}\n\n.bg-gradient-primary {\n    background: linear-gradient(135deg, var(--primary-color), var(--purple-color));\n}\n\n.bg-gradient-success {\n    background: linear-gradient(135deg, var(--success-color), #17a085);\n}\n\n.bg-gradient-info {\n    background: linear-gradient(135deg, var(--info-color), #2e8b9e);\n}\n\n.bg-gradient-warning {\n    background: linear-gradient(135deg, var(--warning-color), #e6a800);\n}\n\n.route-preview {\n    font-size: 0.8rem;\n}\n\n.route-preview .route-point {\n    margin-bottom: 0.25rem;\n    display: flex;\n    align-items: center;\n}\n\n.route-preview .route-point i {\n    margin-right: 0.5rem;\n    font-size: 0.7rem;\n}\n\n.route-preview .route-arrow {\n    text-align: center;\n    margin: 0.1rem 0;\n}\n\n.route-preview .route-arrow i {\n    font-size: 0.6rem;\n}\n\n.route-section {\n    padding: 1.5rem;\n    background: var(--light-color);\n    border-radius: 12px;\n    margin-bottom: 1rem;\n}\n\n.route-section h6 {\n    margin-bottom: 1rem;\n    font-weight: 700;\n}\n\n.system-info .info-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1rem;\n    padding-bottom: 1rem;\n    border-bottom: 1px solid var(--gray-200);\n}\n\n.system-info .info-item:last-child {\n    border-bottom: none;\n    margin-bottom: 0;\n}\n\n.report-card {\n    height: 100%;\n    transition: all 0.3s ease;\n}\n\n.report-card:hover {\n    transform: translateY(-3px);\n    box-shadow: var(--shadow);\n}\n\n.metric-card {\n    padding: 1rem;\n    background: var(--light-color);\n    border-radius: 12px;\n    margin-bottom: 1rem;\n}\n\n.metric-card h4 {\n    font-weight: 800;\n    margin-bottom: 0.25rem;\n}\n\n.chart-container {\n    position: relative;\n    height: 300px;\n}\n\n.chart-area {\n    position: relative;\n    height: 320px;\n}\n\n.chart-pie {\n    position: relative;\n    height: 250px;\n}\n\n.map-container {\n    background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%);\n    border: 2px dashed var(--gray-300);\n}\n\n.map-marker {\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.map-marker:hover {\n    transform: scale(1.2);\n}\n\n.route-analysis .route-item {\n    transition: all 0.3s ease;\n}\n\n.route-analysis .route-item:hover {\n    background: var(--light-color);\n    transform: translateX(5px);\n}\n\n/* Footer */\nfooter {\n    background: var(--dark-color);\n    color: white;\n}\n\nfooter .brand-name {\n    color: white;\n}\n\nfooter .contact-info {\n    font-size: 0.9rem;\n}\n\nfooter .advantage-item {\n    margin-bottom: 0.75rem;\n    font-size: 0.85rem;\n}\n\nfooter .advantage-item i {\n    margin-right: 0.5rem;\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n    .hero-title {\n        font-size: 2.5rem;\n    }\n    \n    .hero-subtitle {\n        font-size: 1.1rem;\n    }\n    \n    .service-card,\n    .main-service-card,\n    .track-card-main,\n    .auth-card {\n        padding: 30px 20px;\n    }\n    \n    .stats-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .section-title {\n        font-size: 2rem;\n    }\n}\n\n@media (max-width: 576px) {\n    .hero-section {\n        padding: 60px 0;\n    }\n    \n    .hero-title {\n        font-size: 2rem;\n    }\n    \n    .services-section,\n    .main-services,\n    .contact-section,\n    .track-section {\n        padding: 40px 0;\n    }\n    \n    .service-card {\n        margin-bottom: 1.5rem;\n    }\n}\n\n/* Utility Classes */\n.shadow {\n    box-shadow: var(--shadow) !important;\n}\n\n.shadow-lg {\n    box-shadow: var(--shadow-lg) !important;\n}\n\n.border-start-primary {\n    border-left: 4px solid var(--primary-color) !important;\n}\n\n.border-start-success {\n    border-left: 4px solid var(--success-color) !important;\n}\n\n.border-start-warning {\n    border-left: 4px solid var(--warning-color) !important;\n}\n\n.border-start-danger {\n    border-left: 4px solid var(--danger-color) !important;\n}\n\n.text-xs {\n    font-size: 0.75rem;\n}\n\n.font-weight-bold {\n    font-weight: 700 !important;\n}\n\n/* Animation */\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.fade-in-up {\n    animation: fadeInUp 0.6s ease forwards;\n}\n\n/* Loading States */\n.loading {\n    opacity: 0.6;\n    pointer-events: none;\n}\n\n.spinner-border-sm {\n    width: 1rem;\n    height: 1rem;\n}\n\n/* Print Styles */\n@media print {\n    .navbar,\n    .btn,\n    .admin-main .card-header .dropdown,\n    footer {\n        display: none !important;\n    }\n    \n    .card {\n        border: 1px solid #000 !important;\n        box-shadow: none !important;\n    }\n    \n    .admin-main {\n        margin: 0 !important;\n        padding: 0 !important;\n    }\n}\n","size_bytes":20022},"static/js/main.js":{"content":"/**\n * XPOM-KZ Main JavaScript\n * Custom functionality for the logistics management system\n */\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeApplication();\n});\n\n/**\n * Initialize the application\n */\nfunction initializeApplication() {\n    initializeTooltips();\n    initializeFormValidation();\n    initializePhoneFormatting();\n    initializeAlerts();\n    initializeTableEnhancements();\n    initializeChartRefresh();\n    initializeSearchFunctionality();\n    initializeNotifications();\n}\n\n/**\n * Initialize Bootstrap tooltips\n */\nfunction initializeTooltips() {\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n}\n\n/**\n * Initialize form validation\n */\nfunction initializeFormValidation() {\n    const forms = document.querySelectorAll('.needs-validation');\n    \n    Array.prototype.slice.call(forms).forEach(function(form) {\n        form.addEventListener('submit', function(event) {\n            if (!form.checkValidity()) {\n                event.preventDefault();\n                event.stopPropagation();\n                \n                // Scroll to first invalid field\n                const firstInvalid = form.querySelector(':invalid');\n                if (firstInvalid) {\n                    firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });\n                    firstInvalid.focus();\n                }\n            }\n            \n            form.classList.add('was-validated');\n        }, false);\n    });\n    \n    // Real-time validation\n    const inputs = document.querySelectorAll('input, select, textarea');\n    inputs.forEach(input => {\n        input.addEventListener('blur', function() {\n            validateField(this);\n        });\n        \n        input.addEventListener('input', function() {\n            if (this.classList.contains('is-invalid')) {\n                validateField(this);\n            }\n        });\n    });\n}\n\n/**\n * Validate individual field\n */\nfunction validateField(field) {\n    const isValid = field.checkValidity();\n    \n    field.classList.remove('is-valid', 'is-invalid');\n    \n    if (field.value.trim() !== '') {\n        field.classList.add(isValid ? 'is-valid' : 'is-invalid');\n    }\n    \n    // Custom validation messages\n    if (!isValid) {\n        const feedback = field.parentNode.querySelector('.invalid-feedback');\n        if (feedback) {\n            if (field.validity.valueMissing) {\n                feedback.textContent = 'Это поле обязательно для заполнения.';\n            } else if (field.validity.typeMismatch) {\n                if (field.type === 'email') {\n                    feedback.textContent = 'Введите корректный email адрес.';\n                } else if (field.type === 'tel') {\n                    feedback.textContent = 'Введите корректный номер телефона.';\n                }\n            } else if (field.validity.patternMismatch) {\n                feedback.textContent = 'Введенное значение не соответствует требуемому формату.';\n            }\n        }\n    }\n}\n\n/**\n * Initialize phone number formatting\n */\nfunction initializePhoneFormatting() {\n    const phoneInputs = document.querySelectorAll('input[type=\"tel\"], input[name*=\"phone\"]');\n    \n    phoneInputs.forEach(input => {\n        input.addEventListener('input', function(e) {\n            formatPhoneNumber(e.target);\n        });\n        \n        input.addEventListener('keypress', function(e) {\n            // Allow only numbers, plus, parentheses, hyphens, and spaces\n            const allowedChars = /[0-9+\\-\\s()]/;\n            if (!allowedChars.test(e.key) && !['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab'].includes(e.key)) {\n                e.preventDefault();\n            }\n        });\n    });\n}\n\n/**\n * Format phone number to Kazakhstan format\n */\nfunction formatPhoneNumber(input) {\n    let value = input.value.replace(/\\D/g, '');\n    \n    // Handle Kazakhstan numbers\n    if (value.startsWith('7') || value.startsWith('8')) {\n        if (value.startsWith('8')) {\n            value = '7' + value.substring(1);\n        }\n        \n        if (value.length <= 11) {\n            if (value.length > 1) {\n                if (value.length <= 4) {\n                    value = `+7 (${value.slice(1)}`;\n                } else if (value.length <= 7) {\n                    value = `+7 (${value.slice(1, 4)}) ${value.slice(4)}`;\n                } else if (value.length <= 9) {\n                    value = `+7 (${value.slice(1, 4)}) ${value.slice(4, 7)}-${value.slice(7)}`;\n                } else {\n                    value = `+7 (${value.slice(1, 4)}) ${value.slice(4, 7)}-${value.slice(7, 9)}-${value.slice(9, 11)}`;\n                }\n            }\n        }\n    } else if (value.length > 0) {\n        // For non-Kazakhstan numbers, just add +7 prefix\n        value = '+7 ' + value;\n    }\n    \n    input.value = value;\n}\n\n/**\n * Initialize alert auto-dismiss\n */\nfunction initializeAlerts() {\n    const alerts = document.querySelectorAll('.alert:not(.alert-permanent)');\n    \n    alerts.forEach(alert => {\n        // Auto-dismiss after 5 seconds\n        setTimeout(() => {\n            const bsAlert = new bootstrap.Alert(alert);\n            if (bsAlert) {\n                bsAlert.close();\n            }\n        }, 5000);\n    });\n}\n\n/**\n * Initialize table enhancements\n */\nfunction initializeTableEnhancements() {\n    const tables = document.querySelectorAll('table');\n    \n    tables.forEach(table => {\n        // Add hover effects\n        const rows = table.querySelectorAll('tbody tr');\n        rows.forEach(row => {\n            row.addEventListener('mouseenter', function() {\n                this.style.backgroundColor = '#f8f9fa';\n            });\n            \n            row.addEventListener('mouseleave', function() {\n                this.style.backgroundColor = '';\n            });\n        });\n        \n        // Make rows clickable if they have a main link\n        rows.forEach(row => {\n            const mainLink = row.querySelector('a[href*=\"/admin/order/\"]');\n            if (mainLink) {\n                row.style.cursor = 'pointer';\n                row.addEventListener('click', function(e) {\n                    // Don't trigger if clicking on an actual link or button\n                    if (!e.target.closest('a, button')) {\n                        window.location.href = mainLink.href;\n                    }\n                });\n            }\n        });\n    });\n}\n\n/**\n * Initialize chart refresh functionality\n */\nfunction initializeChartRefresh() {\n    const chartRefreshButtons = document.querySelectorAll('[data-chart-refresh]');\n    \n    chartRefreshButtons.forEach(button => {\n        button.addEventListener('click', function() {\n            const chartId = this.getAttribute('data-chart-refresh');\n            refreshChart(chartId);\n        });\n    });\n}\n\n/**\n * Refresh chart data\n */\nfunction refreshChart(chartId) {\n    const chartElement = document.getElementById(chartId);\n    if (!chartElement) return;\n    \n    // Add loading state\n    const container = chartElement.closest('.card-body');\n    if (container) {\n        container.classList.add('loading');\n    }\n    \n    // Simulate data refresh (in real implementation, this would fetch from API)\n    setTimeout(() => {\n        if (container) {\n            container.classList.remove('loading');\n        }\n        \n        showNotification('Данные обновлены', 'success');\n    }, 1000);\n}\n\n/**\n * Initialize search functionality\n */\nfunction initializeSearchFunctionality() {\n    const searchInputs = document.querySelectorAll('[data-search-table]');\n    \n    searchInputs.forEach(input => {\n        const tableId = input.getAttribute('data-search-table');\n        const table = document.getElementById(tableId);\n        \n        if (table) {\n            input.addEventListener('input', function() {\n                filterTable(table, this.value);\n            });\n        }\n    });\n}\n\n/**\n * Filter table rows based on search term\n */\nfunction filterTable(table, searchTerm) {\n    const rows = table.querySelectorAll('tbody tr');\n    const term = searchTerm.toLowerCase();\n    \n    rows.forEach(row => {\n        const text = row.textContent.toLowerCase();\n        const match = text.includes(term);\n        row.style.display = match ? '' : 'none';\n    });\n    \n    // Show \"no results\" message if needed\n    const visibleRows = Array.from(rows).filter(row => row.style.display !== 'none');\n    \n    let noResultsRow = table.querySelector('.no-results-row');\n    if (visibleRows.length === 0 && searchTerm.trim() !== '') {\n        if (!noResultsRow) {\n            noResultsRow = document.createElement('tr');\n            noResultsRow.className = 'no-results-row';\n            noResultsRow.innerHTML = `\n                <td colspan=\"100%\" class=\"text-center py-4\">\n                    <i class=\"fas fa-search fa-2x text-muted mb-2\"></i>\n                    <p class=\"text-muted mb-0\">По запросу \"${searchTerm}\" ничего не найдено</p>\n                </td>\n            `;\n            table.querySelector('tbody').appendChild(noResultsRow);\n        }\n    } else if (noResultsRow) {\n        noResultsRow.remove();\n    }\n}\n\n/**\n * Initialize notifications\n */\nfunction initializeNotifications() {\n    // Check for new orders periodically (for admin users)\n    if (window.location.pathname.includes('/admin/')) {\n        setInterval(checkForUpdates, 30000); // Check every 30 seconds\n    }\n}\n\n/**\n * Check for updates (new orders, status changes, etc.)\n */\nfunction checkForUpdates() {\n    // In a real implementation, this would make an API call\n    // For now, we'll simulate with random chance\n    if (Math.random() < 0.1) { // 10% chance\n        showNotification('Новая заявка получена!', 'info', {\n            persistent: true,\n            action: {\n                text: 'Просмотреть',\n                callback: () => window.location.href = '/admin/orders?status=new'\n            }\n        });\n    }\n}\n\n/**\n * Show notification\n */\nfunction showNotification(message, type = 'info', options = {}) {\n    const alertClass = {\n        'success': 'alert-success',\n        'error': 'alert-danger',\n        'warning': 'alert-warning',\n        'info': 'alert-info'\n    }[type] || 'alert-info';\n    \n    const icon = {\n        'success': 'fa-check-circle',\n        'error': 'fa-exclamation-triangle',\n        'warning': 'fa-exclamation-triangle',\n        'info': 'fa-info-circle'\n    }[type] || 'fa-info-circle';\n    \n    const alertHtml = `\n        <div class=\"alert ${alertClass} alert-dismissible fade show ${options.persistent ? 'alert-permanent' : ''}\" role=\"alert\">\n            <i class=\"fas ${icon}\"></i>\n            ${message}\n            ${options.action ? `<button type=\"button\" class=\"btn btn-sm btn-outline-dark ms-3\">${options.action.text}</button>` : ''}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        </div>\n    `;\n    \n    // Find or create notification container\n    let container = document.querySelector('.notification-container');\n    if (!container) {\n        container = document.createElement('div');\n        container.className = 'notification-container position-fixed top-0 end-0 p-3';\n        container.style.zIndex = '9999';\n        document.body.appendChild(container);\n    }\n    \n    // Add notification\n    const alertElement = document.createElement('div');\n    alertElement.innerHTML = alertHtml;\n    const alert = alertElement.firstElementChild;\n    \n    container.appendChild(alert);\n    \n    // Add action handler\n    if (options.action) {\n        const actionBtn = alert.querySelector('button:not(.btn-close)');\n        if (actionBtn) {\n            actionBtn.addEventListener('click', options.action.callback);\n        }\n    }\n    \n    // Auto-remove if not persistent\n    if (!options.persistent) {\n        setTimeout(() => {\n            const bsAlert = new bootstrap.Alert(alert);\n            if (bsAlert) {\n                bsAlert.close();\n            }\n        }, 5000);\n    }\n}\n\n/**\n * Copy text to clipboard\n */\nfunction copyToClipboard(text) {\n    if (navigator.clipboard) {\n        navigator.clipboard.writeText(text).then(() => {\n            showNotification('Скопировано в буфер обмена', 'success');\n        }).catch(() => {\n            fallbackCopyToClipboard(text);\n        });\n    } else {\n        fallbackCopyToClipboard(text);\n    }\n}\n\n/**\n * Fallback copy to clipboard\n */\nfunction fallbackCopyToClipboard(text) {\n    const textArea = document.createElement('textarea');\n    textArea.value = text;\n    textArea.style.position = 'fixed';\n    textArea.style.left = '-9999px';\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n    \n    try {\n        document.execCommand('copy');\n        showNotification('Скопировано в буфер обмена', 'success');\n    } catch (err) {\n        showNotification('Не удалось скопировать', 'error');\n    }\n    \n    document.body.removeChild(textArea);\n}\n\n/**\n * Format currency\n */\nfunction formatCurrency(amount, currency = '₸') {\n    const number = parseFloat(amount);\n    if (isNaN(number)) return amount;\n    \n    return new Intl.NumberFormat('ru-KZ', {\n        style: 'decimal',\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n    }).format(number) + ' ' + currency;\n}\n\n/**\n * Format date\n */\nfunction formatDate(date, format = 'short') {\n    if (!date) return '';\n    \n    const d = new Date(date);\n    if (isNaN(d.getTime())) return date;\n    \n    const options = {\n        'short': { day: '2-digit', month: '2-digit', year: 'numeric' },\n        'long': { day: '2-digit', month: 'long', year: 'numeric' },\n        'datetime': { \n            day: '2-digit', \n            month: '2-digit', \n            year: 'numeric',\n            hour: '2-digit',\n            minute: '2-digit'\n        }\n    }[format] || { day: '2-digit', month: '2-digit', year: 'numeric' };\n    \n    return new Intl.DateTimeFormat('ru-KZ', options).format(d);\n}\n\n/**\n * Debounce function\n */\nfunction debounce(func, wait, immediate) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            timeout = null;\n            if (!immediate) func(...args);\n        };\n        const callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func(...args);\n    };\n}\n\n/**\n * Smooth scroll to element\n */\nfunction scrollToElement(element, offset = 0) {\n    const targetElement = typeof element === 'string' ? document.querySelector(element) : element;\n    \n    if (targetElement) {\n        const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset - offset;\n        \n        window.scrollTo({\n            top: targetPosition,\n            behavior: 'smooth'\n        });\n    }\n}\n\n/**\n * Generate tracking number preview\n */\nfunction generateTrackingPreview(type = 'astana') {\n    const year = new Date().getFullYear();\n    const prefix = type === 'astana' ? 'AST' : 'KZ';\n    const random = Math.floor(Math.random() * 999) + 1;\n    const number = random.toString().padStart(3, '0');\n    \n    return `${prefix}-${year}-${number}`;\n}\n\n/**\n * Validate tracking number format\n */\nfunction validateTrackingNumber(trackingNumber) {\n    const pattern = /^(AST|KZ)-\\d{4}-\\d{3}$/;\n    return pattern.test(trackingNumber.toUpperCase());\n}\n\n/**\n * Export utilities for global use\n */\nwindow.XPOMUtils = {\n    showNotification,\n    copyToClipboard,\n    formatCurrency,\n    formatDate,\n    debounce,\n    scrollToElement,\n    generateTrackingPreview,\n    validateTrackingNumber\n};\n\n/**\n * Handle global errors\n */\nwindow.addEventListener('error', function(e) {\n    console.error('Global error:', e.error);\n    showNotification('Произошла ошибка. Пожалуйста, обновите страницу.', 'error');\n});\n\n/**\n * Handle network errors\n */\nwindow.addEventListener('offline', function() {\n    showNotification('Соединение с интернетом потеряно', 'warning', { persistent: true });\n});\n\nwindow.addEventListener('online', function() {\n    showNotification('Соединение восстановлено', 'success');\n    // Remove persistent offline notifications\n    document.querySelectorAll('.alert-permanent').forEach(alert => {\n        const bsAlert = new bootstrap.Alert(alert);\n        if (bsAlert) {\n            bsAlert.close();\n        }\n    });\n});\n\n/**\n * Performance monitoring\n */\nif (window.performance && window.performance.timing) {\n    window.addEventListener('load', function() {\n        const loadTime = window.performance.timing.loadEventEnd - window.performance.timing.navigationStart;\n        console.log(`Page load time: ${loadTime}ms`);\n        \n        // Send to analytics if configured\n        if (typeof gtag !== 'undefined') {\n            gtag('event', 'timing_complete', {\n                name: 'load',\n                value: loadTime\n            });\n        }\n    });\n}\n","size_bytes":17318},"static/css/admin.css":{"content":"/* Modern Minimalist Admin Panel */\n\n:root {\n    --primary: #2563eb;\n    --primary-light: #3b82f6;\n    --primary-dark: #1d4ed8;\n    --success: #10b981;\n    --warning: #f59e0b;\n    --danger: #ef4444;\n    --info: #06b6d4;\n    --dark: #111827;\n    --gray-50: #f9fafb;\n    --gray-100: #f3f4f6;\n    --gray-200: #e5e7eb;\n    --gray-300: #d1d5db;\n    --gray-400: #9ca3af;\n    --gray-500: #6b7280;\n    --gray-600: #4b5563;\n    --gray-700: #374151;\n    --gray-800: #1f2937;\n    --gray-900: #111827;\n    --sidebar-width: 280px;\n    --topbar-height: 70px;\n    --border-radius: 8px;\n    --border-radius-lg: 12px;\n    --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody.admin-layout {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    background-color: var(--gray-50);\n    color: var(--gray-800);\n    line-height: 1.6;\n    overflow-x: hidden;\n}\n\n/* Sidebar */\n.sidebar {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: var(--sidebar-width);\n    height: 100vh;\n    background: white;\n    border-right: 1px solid var(--gray-200);\n    z-index: 1000;\n    display: flex;\n    flex-direction: column;\n    transition: transform 0.3s ease;\n}\n\n.sidebar-header {\n    padding: 24px 20px;\n    border-bottom: 1px solid var(--gray-100);\n}\n\n.sidebar-brand {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n}\n\n.brand-icon {\n    width: 48px;\n    height: 48px;\n    background: linear-gradient(135deg, var(--primary), var(--primary-light));\n    border-radius: var(--border-radius-lg);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-size: 20px;\n    flex-shrink: 0;\n}\n\n.brand-text {\n    min-width: 0;\n}\n\n.brand-title {\n    font-size: 20px;\n    font-weight: 700;\n    color: var(--gray-900);\n    line-height: 1.2;\n}\n\n.brand-subtitle {\n    font-size: 13px;\n    color: var(--gray-500);\n    font-weight: 500;\n}\n\n/* Sidebar Menu */\n.sidebar-menu {\n    flex: 1;\n    padding: 20px 0;\n    overflow-y: auto;\n}\n\n.menu-section {\n    margin-bottom: 32px;\n}\n\n.menu-title {\n    font-size: 12px;\n    font-weight: 600;\n    color: var(--gray-400);\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n    padding: 0 20px 12px;\n}\n\n.menu-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n.menu-item {\n    margin-bottom: 4px;\n}\n\n.menu-link {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    padding: 12px 20px;\n    color: var(--gray-600);\n    text-decoration: none;\n    font-size: 14px;\n    font-weight: 500;\n    transition: all 0.2s ease;\n    position: relative;\n}\n\n.menu-link:hover {\n    background-color: var(--gray-50);\n    color: var(--gray-800);\n    text-decoration: none;\n}\n\n.menu-link.active {\n    background-color: var(--primary);\n    color: white;\n    font-weight: 600;\n}\n\n.menu-link.active::before {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    width: 4px;\n    background: var(--primary-dark);\n}\n\n.menu-link i {\n    font-size: 16px;\n    width: 20px;\n    text-align: center;\n    flex-shrink: 0;\n}\n\n.menu-link .badge {\n    background: var(--danger);\n    color: white;\n    font-size: 11px;\n    font-weight: 600;\n    padding: 2px 6px;\n    border-radius: 10px;\n    margin-left: auto;\n    min-width: 18px;\n    text-align: center;\n}\n\n/* Sidebar Footer */\n.sidebar-footer {\n    padding: 20px;\n    border-top: 1px solid var(--gray-100);\n    display: flex;\n    align-items: center;\n    gap: 12px;\n}\n\n.user-info {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    flex: 1;\n    min-width: 0;\n}\n\n.user-avatar {\n    width: 40px;\n    height: 40px;\n    background: var(--gray-100);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: var(--gray-500);\n    font-size: 18px;\n    flex-shrink: 0;\n}\n\n.user-details {\n    min-width: 0;\n}\n\n.user-name {\n    font-size: 14px;\n    font-weight: 600;\n    color: var(--gray-900);\n    line-height: 1.2;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.user-role {\n    font-size: 12px;\n    color: var(--gray-500);\n    line-height: 1.2;\n}\n\n.logout-btn {\n    width: 36px;\n    height: 36px;\n    background: none;\n    border: 1px solid var(--gray-200);\n    border-radius: var(--border-radius);\n    color: var(--gray-500);\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.2s ease;\n    flex-shrink: 0;\n}\n\n.logout-btn:hover {\n    background: var(--gray-50);\n    border-color: var(--gray-300);\n    color: var(--gray-700);\n}\n\n/* Main Content */\n.main-content {\n    margin-left: var(--sidebar-width);\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n}\n\n/* Topbar */\n.topbar {\n    height: var(--topbar-height);\n    background: white;\n    border-bottom: 1px solid var(--gray-200);\n    display: flex;\n    align-items: center;\n    padding: 0 24px;\n    gap: 16px;\n    position: sticky;\n    top: 0;\n    z-index: 100;\n}\n\n.sidebar-toggle {\n    width: 40px;\n    height: 40px;\n    background: none;\n    border: 1px solid var(--gray-200);\n    border-radius: var(--border-radius);\n    color: var(--gray-600);\n    cursor: pointer;\n    display: none;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.2s ease;\n}\n\n.sidebar-toggle:hover {\n    background: var(--gray-50);\n    border-color: var(--gray-300);\n}\n\n.topbar-content {\n    flex: 1;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.page-title {\n    font-size: 24px;\n    font-weight: 700;\n    color: var(--gray-900);\n}\n\n.topbar-actions {\n    display: flex;\n    align-items: center;\n    gap: 16px;\n}\n\n.current-time {\n    font-size: 14px;\n    color: var(--gray-500);\n    font-weight: 500;\n}\n\n/* Flash Messages */\n.flash-messages {\n    padding: 16px 24px 0;\n}\n\n.alert {\n    border-radius: var(--border-radius);\n    border: none;\n    padding: 12px 16px;\n    margin-bottom: 16px;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    font-size: 14px;\n    font-weight: 500;\n}\n\n.alert i {\n    font-size: 16px;\n}\n\n.alert-success {\n    background: #ecfdf5;\n    color: #065f46;\n}\n\n.alert-danger {\n    background: #fef2f2;\n    color: #991b1b;\n}\n\n.alert-info {\n    background: #f0f9ff;\n    color: #1e40af;\n}\n\n.btn-close {\n    margin-left: auto;\n    background: none;\n    border: none;\n    color: inherit;\n    opacity: 0.5;\n    cursor: pointer;\n    padding: 0;\n    width: 20px;\n    height: 20px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.btn-close:hover {\n    opacity: 1;\n}\n\n/* Page Content */\n.page-content {\n    flex: 1;\n    padding: 24px;\n}\n\n/* Stats Cards */\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 20px;\n    margin-bottom: 32px;\n}\n\n.stat-card {\n    background: white;\n    border-radius: var(--border-radius-lg);\n    padding: 24px;\n    box-shadow: var(--shadow);\n    border: 1px solid var(--gray-100);\n    position: relative;\n    overflow: hidden;\n}\n\n.stat-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n    background: var(--primary);\n}\n\n.stat-card.success::before {\n    background: var(--success);\n}\n\n.stat-card.warning::before {\n    background: var(--warning);\n}\n\n.stat-card.danger::before {\n    background: var(--danger);\n}\n\n.stat-card.info::before {\n    background: var(--info);\n}\n\n.stat-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    margin-bottom: 12px;\n}\n\n.stat-title {\n    font-size: 14px;\n    font-weight: 500;\n    color: var(--gray-600);\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n}\n\n.stat-icon {\n    width: 48px;\n    height: 48px;\n    background: var(--gray-50);\n    border-radius: var(--border-radius-lg);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 20px;\n    color: var(--primary);\n}\n\n.stat-card.success .stat-icon {\n    background: #ecfdf5;\n    color: var(--success);\n}\n\n.stat-card.warning .stat-icon {\n    background: #fffbeb;\n    color: var(--warning);\n}\n\n.stat-card.danger .stat-icon {\n    background: #fef2f2;\n    color: var(--danger);\n}\n\n.stat-card.info .stat-icon {\n    background: #f0f9ff;\n    color: var(--info);\n}\n\n.stat-value {\n    font-size: 32px;\n    font-weight: 800;\n    color: var(--gray-900);\n    line-height: 1;\n    margin-bottom: 8px;\n}\n\n.stat-change {\n    font-size: 14px;\n    font-weight: 500;\n    display: flex;\n    align-items: center;\n    gap: 4px;\n}\n\n.stat-change.positive {\n    color: var(--success);\n}\n\n.stat-change.negative {\n    color: var(--danger);\n}\n\n/* Content Card */\n.content-card {\n    background: white;\n    border-radius: var(--border-radius-lg);\n    box-shadow: var(--shadow);\n    border: 1px solid var(--gray-100);\n    overflow: hidden;\n}\n\n.card-header {\n    padding: 20px 24px;\n    border-bottom: 1px solid var(--gray-100);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.card-title {\n    font-size: 18px;\n    font-weight: 700;\n    color: var(--gray-900);\n    margin: 0;\n}\n\n.card-body {\n    padding: 24px;\n}\n\n/* Buttons */\n.btn {\n    font-weight: 500;\n    border-radius: var(--border-radius);\n    padding: 8px 16px;\n    font-size: 14px;\n    transition: all 0.2s ease;\n    border: 1px solid transparent;\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n.btn:hover {\n    text-decoration: none;\n    transform: translateY(-1px);\n}\n\n.btn-primary {\n    background: var(--primary);\n    border-color: var(--primary);\n    color: white;\n}\n\n.btn-primary:hover {\n    background: var(--primary-dark);\n    border-color: var(--primary-dark);\n    color: white;\n}\n\n.btn-success {\n    background: var(--success);\n    border-color: var(--success);\n    color: white;\n}\n\n.btn-warning {\n    background: var(--warning);\n    border-color: var(--warning);\n    color: white;\n}\n\n.btn-danger {\n    background: var(--danger);\n    border-color: var(--danger);\n    color: white;\n}\n\n.btn-outline {\n    background: white;\n    border-color: var(--gray-300);\n    color: var(--gray-700);\n}\n\n.btn-outline:hover {\n    background: var(--gray-50);\n    border-color: var(--gray-400);\n}\n\n.btn-sm {\n    padding: 6px 12px;\n    font-size: 13px;\n}\n\n.btn-lg {\n    padding: 12px 24px;\n    font-size: 16px;\n}\n\n/* Tables */\n.table-wrapper {\n    overflow-x: auto;\n}\n\n.data-table {\n    width: 100%;\n    border-collapse: collapse;\n    margin: 0;\n}\n\n.data-table th,\n.data-table td {\n    padding: 12px 16px;\n    text-align: left;\n    border-bottom: 1px solid var(--gray-100);\n    font-size: 14px;\n}\n\n.data-table th {\n    background: var(--gray-50);\n    font-weight: 600;\n    color: var(--gray-700);\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n    font-size: 12px;\n}\n\n.data-table tbody tr:hover {\n    background: var(--gray-50);\n}\n\n/* Status Badges */\n.status-badge {\n    padding: 4px 8px;\n    border-radius: 12px;\n    font-size: 12px;\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n}\n\n.status-new {\n    background: #fef3c7;\n    color: #92400e;\n}\n\n.status-confirmed {\n    background: #dbeafe;\n    color: #1e40af;\n}\n\n.status-in-progress {\n    background: #e0f2fe;\n    color: #0369a1;\n}\n\n.status-delivered {\n    background: #dcfce7;\n    color: #166534;\n}\n\n.status-cancelled {\n    background: #fee2e2;\n    color: #991b1b;\n}\n\n/* Responsive */\n@media (max-width: 1024px) {\n    .sidebar {\n        transform: translateX(-100%);\n    }\n    \n    .sidebar.open {\n        transform: translateX(0);\n    }\n    \n    .main-content {\n        margin-left: 0;\n    }\n    \n    .sidebar-toggle {\n        display: flex;\n    }\n    \n    .stats-grid {\n        grid-template-columns: 1fr;\n    }\n}\n\n@media (max-width: 640px) {\n    .page-content {\n        padding: 16px;\n    }\n    \n    .topbar {\n        padding: 0 16px;\n    }\n    \n    .page-title {\n        font-size: 20px;\n    }\n    \n    .flash-messages {\n        padding: 16px 16px 0;\n    }\n}","size_bytes":12175},"static/js/admin.js":{"content":"// Modern Admin Panel JavaScript\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize admin panel\n    initSidebar();\n    initCurrentTime();\n    initTooltips();\n    \n    // Auto-hide alerts\n    setTimeout(function() {\n        const alerts = document.querySelectorAll('.alert');\n        alerts.forEach(alert => {\n            if (alert.querySelector('.btn-close')) {\n                alert.style.opacity = '0';\n                setTimeout(() => alert.remove(), 300);\n            }\n        });\n    }, 5000);\n});\n\n// Sidebar functionality\nfunction initSidebar() {\n    const sidebar = document.getElementById('sidebar');\n    const sidebarToggle = document.getElementById('sidebarToggle');\n    \n    if (sidebarToggle) {\n        sidebarToggle.addEventListener('click', function() {\n            sidebar.classList.toggle('open');\n        });\n    }\n    \n    // Close sidebar when clicking outside on mobile\n    document.addEventListener('click', function(e) {\n        if (window.innerWidth <= 1024) {\n            if (!sidebar.contains(e.target) && !sidebarToggle.contains(e.target)) {\n                sidebar.classList.remove('open');\n            }\n        }\n    });\n    \n    // Handle window resize\n    window.addEventListener('resize', function() {\n        if (window.innerWidth > 1024) {\n            sidebar.classList.remove('open');\n        }\n    });\n}\n\n// Current time display\nfunction initCurrentTime() {\n    const timeElement = document.getElementById('currentTime');\n    if (timeElement) {\n        updateTime();\n        setInterval(updateTime, 1000);\n    }\n    \n    function updateTime() {\n        const now = new Date();\n        const options = {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            timeZone: 'Asia/Almaty'\n        };\n        timeElement.textContent = now.toLocaleString('ru-RU', options);\n    }\n}\n\n// Initialize tooltips\nfunction initTooltips() {\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    tooltipTriggerList.map(function(tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n}\n\n// Chart configurations\nconst chartColors = {\n    primary: '#2563eb',\n    success: '#10b981',\n    warning: '#f59e0b',\n    danger: '#ef4444',\n    info: '#06b6d4',\n    gray: '#6b7280'\n};\n\n// Initialize charts if Chart.js is available\nif (typeof Chart !== 'undefined') {\n    Chart.defaults.font.family = 'Inter, sans-serif';\n    Chart.defaults.font.size = 12;\n    Chart.defaults.color = '#6b7280';\n    Chart.defaults.borderColor = '#e5e7eb';\n    Chart.defaults.backgroundColor = 'rgba(37, 99, 235, 0.1)';\n}\n\n// Utility functions\nfunction showNotification(message, type = 'info') {\n    const notification = document.createElement('div');\n    notification.className = `alert alert-${type} alert-dismissible`;\n    notification.innerHTML = `\n        <i class=\"fas fa-${type === 'success' ? 'check-circle' : type === 'danger' ? 'exclamation-triangle' : 'info-circle'}\"></i>\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    const container = document.querySelector('.flash-messages') || document.querySelector('.page-content');\n    container.insertBefore(notification, container.firstChild);\n    \n    setTimeout(() => {\n        notification.style.opacity = '0';\n        setTimeout(() => notification.remove(), 300);\n    }, 5000);\n}\n\nfunction formatNumber(num) {\n    return new Intl.NumberFormat('ru-RU').format(num);\n}\n\nfunction formatDate(date) {\n    return new Date(date).toLocaleDateString('ru-RU', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n    });\n}\n\nfunction formatDateTime(date) {\n    return new Date(date).toLocaleString('ru-RU', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n    });\n}","size_bytes":3985}}}