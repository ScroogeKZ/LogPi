import requests
import logging
import os
from models import Order

# Get Telegram bot configuration from environment variables
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', '')

def send_telegram_notification(order):
    """Send notification about new order to Telegram"""
    
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        logging.warning("Telegram bot token or chat ID not configured")
        return False
    
    try:
        # Prepare message text
        message_text = f"""
üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ XPOM-KZ*

üìã *–ù–æ–º–µ—Ä:* `{order.tracking_number}`
üë§ *–ö–ª–∏–µ–Ω—Ç:* {order.customer_name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {order.customer_phone}
üìß *Email:* {order.customer_email or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üöö *–¢–∏–ø –∑–∞–∫–∞–∑–∞:* {order.get_type_display()}

üìç *–ó–∞–±–æ—Ä:* {order.pickup_address}
üìç *–î–æ—Å—Ç–∞–≤–∫–∞:* {order.delivery_address}

üì¶ *–ì—Ä—É–∑:* {order.cargo_description}
‚öñÔ∏è *–í–µ—Å:* {order.cargo_weight or '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
üìè *–ì–∞–±–∞—Ä–∏—Ç—ã:* {order.cargo_dimensions or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

üïê *–°–æ–∑–¥–∞–Ω–∞:* {order.created_at.strftime('%d.%m.%Y %H:%M')}
"""

        # Send message
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        
        data = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': message_text,
            'parse_mode': 'Markdown'
        }
        
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logging.info(f"Telegram notification sent for order {order.tracking_number}")
            return True
        else:
            logging.error(f"Failed to send Telegram notification: {response.status_code} - {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        logging.error(f"Network error sending Telegram notification: {e}")
        return False
    except Exception as e:
        logging.error(f"Unexpected error sending Telegram notification: {e}")
        return False

def send_status_update_notification(order, old_status, new_status):
    """Send notification about order status update"""
    
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        return False
    
    try:
        status_map = {
            'new': '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞',
            'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
            'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏',
            'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–∞',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
        }
        
        message_text = f"""
üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞*

üìã *–ù–æ–º–µ—Ä:* `{order.tracking_number}`
üë§ *–ö–ª–∏–µ–Ω—Ç:* {order.customer_name}

üìä *–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:*
‚ùå –ë—ã–ª–æ: {status_map.get(old_status, old_status)}
‚úÖ –°—Ç–∞–ª–æ: {status_map.get(new_status, new_status)}

üïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {order.updated_at.strftime('%d.%m.%Y %H:%M')}
"""

        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        
        data = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': message_text,
            'parse_mode': 'Markdown'
        }
        
        response = requests.post(url, data=data, timeout=10)
        
        if response.status_code == 200:
            logging.info(f"Status update notification sent for order {order.tracking_number}")
            return True
        else:
            logging.error(f"Failed to send status update notification: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logging.error(f"Error sending status update notification: {e}")
        return False
